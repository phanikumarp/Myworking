filter {	
   if [input] == "logstash"{
	if [type] in ["cinder","neutron","glance","keystone","ceilometer","horizon","swift","swiftlm","heat","openvswitch"]{
		grok{
			patterns_dir => "./patterns"
			match => [ "message", "%{OPENSTACK_FORMAT_1}"]
			overwrite => [ "message" ]
		}
	}else if [type] == "nova"{
		grok{
			patterns_dir => "./patterns"
			break_on_match => true
			match => [ "message", "%{OPENSTACK_FORMAT_2}"]
			overwrite => [ "message" ]
			match => [ "message", "%{OPENSTACK_FORMAT_NOVA_INSTANCE}"]
		}
        }
	
	ruby {
                code => "
                        filename = event['path'].split('/').last
                        event['subservice'] = filename.split('.').first
                        "
        }

	if "_grokparsefailure" in [tags] {	
		grok{
			patterns_dir => "./patterns"
			break_on_match => true
			match => [ "message", "%{OPENSTACK_GENERIC_WITHUSER}"]
                        match => [ "message", "%{OPENSTACK_GENERIC}"]			
			match => [ "message", "%{TIME_LOG}"]		
			match => [ "message", "%{RAW_LOG}"]
			overwrite => [ "message" ]
		}		
	}
	if[timezone] and [time] {
			mutate{
				replace => { "time" => "%{time} %{timezone}"}
			}
	}
	date {
		match => [ "time" ,"YYYY-MM-dd HH:mm:ss.SSS Z", "YYYY-MM-dd HH:mm:ss.SSS","YYYY-MM-dd HH:mm:ss,SSS" , "ISO8601"]
		target =>"@timestamp"
	}
	if [request] =~ /.+/ {
		mutate{
                	replace => ["message","%{request}"]
	        }
	}
	mutate{
                remove_field => ["time","tags","timezone"]
        }
  }
}
